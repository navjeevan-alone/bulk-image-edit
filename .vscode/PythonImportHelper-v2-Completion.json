[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "ImageEditorUI",
        "importPath": "ui",
        "description": "ui",
        "isExtraImport": true,
        "detail": "ui",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QHBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLineEdit",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QComboBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QSpinBox",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "change_file_format",
        "importPath": "image_processor",
        "description": "image_processor",
        "isExtraImport": true,
        "detail": "image_processor",
        "documentation": {}
    },
    {
        "label": "adjust_file_size",
        "importPath": "image_processor",
        "description": "image_processor",
        "isExtraImport": true,
        "detail": "image_processor",
        "documentation": {}
    },
    {
        "label": "QIcon",
        "importPath": "PyQt5.QtGui",
        "description": "PyQt5.QtGui",
        "isExtraImport": true,
        "detail": "PyQt5.QtGui",
        "documentation": {}
    },
    {
        "label": "Qt",
        "importPath": "PyQt5.QtCore",
        "description": "PyQt5.QtCore",
        "isExtraImport": true,
        "detail": "PyQt5.QtCore",
        "documentation": {}
    },
    {
        "label": "load_stylesheet",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "resource_path",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "update_aspect_ratio",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "update_size_units",
        "importPath": "utils",
        "description": "utils",
        "isExtraImport": true,
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "ImageProcessing",
        "importPath": "image_processing",
        "description": "image_processing",
        "isExtraImport": true,
        "detail": "image_processing",
        "documentation": {}
    },
    {
        "label": "ImageProcessing",
        "kind": 6,
        "importPath": "image_processing",
        "description": "image_processing",
        "peekOfCode": "class ImageProcessing:\n    def __init__(self, input_folder, output_folder, width, height, \n                 background_color=\"#FFFFFF\", padding=0, \n                 output_format=\"original\", output_size_range=None):\n        self.input_folder = input_folder\n        self.output_folder = output_folder\n        self.width = width\n        self.height = height\n        self.background_color = background_color\n        self.padding = padding",
        "detail": "image_processing",
        "documentation": {}
    },
    {
        "label": "input_image_path",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "input_image_path = './input/jacket.jpg'\nnew_format = 'webp'\nmin_size = 100  # Minimum size in KB\nmax_size = 500  # Maximum size in KB\nmin_quality = 50  # Minimum quality percentage\n# Change file format\nnew_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "new_format",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "new_format = 'webp'\nmin_size = 100  # Minimum size in KB\nmax_size = 500  # Maximum size in KB\nmin_quality = 50  # Minimum quality percentage\n# Change file format\nnew_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "min_size",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "min_size = 100  # Minimum size in KB\nmax_size = 500  # Maximum size in KB\nmin_quality = 50  # Minimum quality percentage\n# Change file format\nnew_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "max_size",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "max_size = 500  # Maximum size in KB\nmin_quality = 50  # Minimum quality percentage\n# Change file format\nnew_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "min_quality",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "min_quality = 50  # Minimum quality percentage\n# Change file format\nnew_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "new_file",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "new_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "BulkImageEditorUI",
        "kind": 6,
        "importPath": "ui",
        "description": "ui",
        "peekOfCode": "class BulkImageEditorUI(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.init_ui()\n    def init_ui(self):\n        # Set main window properties\n        self.setWindowTitle(\"Bulk Image Editor\")\n        self.setGeometry(200, 100, 800, 400)\n        self.setMaximumWidth(600)  # Setting a max width for central alignment\n        self.setWindowIcon(QIcon(resource_path(\"assets\\\\icon.ico\")))",
        "detail": "ui",
        "documentation": {}
    },
    {
        "label": "load_stylesheet",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def load_stylesheet(filename):\n    with open(filename, \"r\") as file:\n        return file.read()\ndef resource_path(relative_path):\n    \"\"\" Get absolute path to resource, works for dev and for PyInstaller \"\"\"\n    try:\n        # PyInstaller creates a temp folder and stores path in _MEIPASS\n        base_path = sys._MEIPASS2\n    except Exception:\n        base_path = os.path.abspath(\".\")",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "resource_path",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def resource_path(relative_path):\n    \"\"\" Get absolute path to resource, works for dev and for PyInstaller \"\"\"\n    try:\n        # PyInstaller creates a temp folder and stores path in _MEIPASS\n        base_path = sys._MEIPASS2\n    except Exception:\n        base_path = os.path.abspath(\".\")\n    return os.path.join(base_path, relative_path)\n# utils.py\ndef update_size_units(width_input, height_input, unit):",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "update_size_units",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def update_size_units(width_input, height_input, unit):\n    \"\"\"Synchronize size units between width and height.\n    Args:\n        width_input (QSpinBox): The width input widget.\n        height_input (QSpinBox): The height input widget.\n        unit (str): The selected unit (e.g., 'px', 'mm', 'cm', 'inch').\n    \"\"\"\n    # Logic to convert units based on the current unit\n    if unit == \"px\":\n        # Do nothing if already in pixels",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "update_aspect_ratio",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def update_aspect_ratio(ratio_width_input, ratio_height_input, ratio_type):\n    \"\"\"Synchronize aspect ratio width and height inputs based on the selected ratio type.\n    Args:\n        ratio_width_input (QSpinBox): The width aspect ratio input widget.\n        ratio_height_input (QSpinBox): The height aspect ratio input widget.\n        ratio_type (str): The selected aspect ratio type.\n    \"\"\"\n    if ratio_type == \"Original\":\n        pass\n    elif ratio_type == \"1:1\":",
        "detail": "utils",
        "documentation": {}
    }
]