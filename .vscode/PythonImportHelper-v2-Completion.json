[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "QtWidgets",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "uic",
        "importPath": "PyQt5",
        "description": "PyQt5",
        "isExtraImport": true,
        "detail": "PyQt5",
        "documentation": {}
    },
    {
        "label": "ImageEditorUI",
        "importPath": "ui",
        "description": "ui",
        "isExtraImport": true,
        "detail": "ui",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QApplication",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QWidget",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QVBoxLayout",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QPushButton",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QFileDialog",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "QLabel",
        "importPath": "PyQt5.QtWidgets",
        "description": "PyQt5.QtWidgets",
        "isExtraImport": true,
        "detail": "PyQt5.QtWidgets",
        "documentation": {}
    },
    {
        "label": "change_file_format",
        "importPath": "image_processor",
        "description": "image_processor",
        "isExtraImport": true,
        "detail": "image_processor",
        "documentation": {}
    },
    {
        "label": "adjust_file_size",
        "importPath": "image_processor",
        "description": "image_processor",
        "isExtraImport": true,
        "detail": "image_processor",
        "documentation": {}
    },
    {
        "label": "process_images",
        "importPath": "image_processor",
        "description": "image_processor",
        "isExtraImport": true,
        "detail": "image_processor",
        "documentation": {}
    },
    {
        "label": "process_images",
        "kind": 2,
        "importPath": "image_processor",
        "description": "image_processor",
        "peekOfCode": "def process_images(input_folder, output_folder):\n    \"\"\"\n    Process all images in the input folder, resize them to fit within 1080x1080,\n    and save them to the output folder with a white background and at least\n    20 pixels of padding from all sides.\n    Args:\n        input_folder (str): Path to the input folder containing images.\n        output_folder (str): Path to the output folder for saving processed images.\n    \"\"\"\n    if not os.path.exists(output_folder):",
        "detail": "image_processor",
        "documentation": {}
    },
    {
        "label": "change_file_format",
        "kind": 2,
        "importPath": "image_processor",
        "description": "image_processor",
        "peekOfCode": "def change_file_format(input_file_path, output_format):\n    \"\"\"\n    Change the file format of an image to the specified format.\n    Args:\n        input_file_path (str): Path to the input image file.\n        output_format (str): Desired output format (jpg, png, jpeg, webp).\n    Returns:\n        str: Path to the saved file in the new format.\n    \"\"\"\n    output_file_path = f\"{os.path.splitext(input_file_path)[0]}.{output_format.lower()}\"",
        "detail": "image_processor",
        "documentation": {}
    },
    {
        "label": "adjust_file_size",
        "kind": 2,
        "importPath": "image_processor",
        "description": "image_processor",
        "peekOfCode": "def adjust_file_size(file_path, min_size_kb, max_size_kb, min_quality):\n    \"\"\"\n    Adjust the file size of an image to be within the specified range.\n    Args:\n        file_path (str): Path to the input image file.\n        min_size_kb (int): Minimum file size in KB.\n        max_size_kb (int): Maximum file size in KB.\n        min_quality (int): Minimum quality percentage (1-100) for JPEG.\n    Returns:\n        str: Path to the adjusted file.",
        "detail": "image_processor",
        "documentation": {}
    },
    {
        "label": "MyApp",
        "kind": 6,
        "importPath": "initial",
        "description": "initial",
        "peekOfCode": "class MyApp(QtWidgets.QMainWindow):\n    def __init__(self):\n        super(MyApp, self).__init__()\n        # Load the UI file\n        uic.loadUi(\"initial.ui\", self)  \nif __name__ == \"__main__\":\n    app = QtWidgets.QApplication(sys.argv)\n    window = MyApp()\n    window.show()\n    sys.exit(app.exec_())",
        "detail": "initial",
        "documentation": {}
    },
    {
        "label": "input_image_path",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "input_image_path = './input/jacket.jpg'\nnew_format = 'webp'\nmin_size = 100  # Minimum size in KB\nmax_size = 500  # Maximum size in KB\nmin_quality = 50  # Minimum quality percentage\n# Change file format\nnew_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "new_format",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "new_format = 'webp'\nmin_size = 100  # Minimum size in KB\nmax_size = 500  # Maximum size in KB\nmin_quality = 50  # Minimum quality percentage\n# Change file format\nnew_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "min_size",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "min_size = 100  # Minimum size in KB\nmax_size = 500  # Maximum size in KB\nmin_quality = 50  # Minimum quality percentage\n# Change file format\nnew_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "max_size",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "max_size = 500  # Maximum size in KB\nmin_quality = 50  # Minimum quality percentage\n# Change file format\nnew_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "min_quality",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "min_quality = 50  # Minimum quality percentage\n# Change file format\nnew_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "new_file",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "new_file = change_file_format(input_image_path, new_format)\n# Adjust file size\nif new_file:\n    adjusted_file = adjust_file_size(new_file, min_size, max_size, min_quality)",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "ImageEditorApp",
        "kind": 6,
        "importPath": "ui",
        "description": "ui",
        "peekOfCode": "class ImageEditorApp(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initUI()\n    def initUI(self):\n        self.setWindowTitle('Bulk Image Editor')\n        layout = QVBoxLayout()\n        self.input_label = QLabel('No input folder selected')\n        layout.addWidget(self.input_label)\n        self.output_label = QLabel('No output folder selected')",
        "detail": "ui",
        "documentation": {}
    }
]